@model IEnumerable<_2x2CRM.mvc.Models.Area.Issue>

@{
    ViewBag.Title = "MyIssues";
}

<head>
    <script src="~/Content/vue.min.js"></script>
    <script src="~/Content/vue-select.min.js"></script>
    <script src="~/Content/vue-js-modal.min.js"></script>
    <script src="~/Scripts/jquery-1.10.2.min.js"></script>
</head>


<style type="text/css">
    .modal-mask {
        position: fixed;
        z-index: 9998;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, .5);
        display: table;
        transition: opacity .3s ease;
    }

    .modal-wrapper {
        display: table-cell;
        vertical-align: middle;
    }

    .modal-container {
        width: 1200px;
        margin: 0px auto;
        padding: 20px 30px;
        background-color: #fff;
        border-radius: 2px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, .33);
        transition: all .3s ease;
        font-family: Helvetica, Arial, sans-serif;
    }

    .modal-header h3 {
        margin-top: 0;
        color: #42b983;
    }

    .modal-body {
        margin: 20px 0;
    }

    .modal-default-button {
        float: right;
    }

    /*
     * The following styles are auto-applied to elements with
     * transition="modal" when their visibility is toggled
     * by Vue.js.
     *
     * You can easily play with the modal transition by editing
     * these styles.
     */

    .modal-enter {
        opacity: 0;
    }

    .modal-leave-active {
        opacity: 0;
    }

        .modal-enter .modal-container,
        .modal-leave-active .modal-container {
            -webkit-transform: scale(1.1);
            transform: scale(1.1);
        }
</style>

<h2>MyIssues</h2>


<div id="issue-list">
    <p>
        <button v-on:click="edit2(0)">Create New Issue</button>
    </p>

    <input inputmode="" type="text" placeholder="input filter" v-model="filter1"/>
    Страница <input inputmode="" type="text" placeholder="page" v-model="pageNo"/>

    <button v-on:click="prevPage"><</button>
    <button v-on:click="nextPage">></button>


    <!-- use the modal component, pass in the prop -->
    показано {{(pageNo-1) * pageRows + 1}} - {{pageNo * pageRows}}
    из {{rows}}
    страниц {{pages}}

    <table class="table">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.OpDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Client)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>

            </th>
        </tr>

        <tr v-for="item in filtered_items" :key="item.Id">
            <td>{{item.Date}}</td>
            <td>{{item.ClientName}}</td>
            <td>{{item.Name}}</td>
            <td>
                <button v-on:click="edit2(item.Id)">Edit</button>
                <button v-on:click="deleteIssue(item.Id)">Delete</button>
            </td>
        </tr>
    </table>

    <modal v-if="showModal" v-on:close="showModal = false" :Issues.sync="issues" :Issue.sync="currentIssue" :Persons="persons">
    </modal>
</div>
<script>

    Vue.component('v-select', VueSelect.VueSelect);
    Vue.component('modal',
    {
        template: '#modal-template',
        props: ['Issues', 'Issue', 'Persons'],
        data: function () {
            return {
                optionsSupp: this.Persons,
                optionsClient: this.Persons,
                persons: this.Persons
            }
        },
        methods: {
            onChange(val) {
                //console.log("onChange");
                if (this.Issue.IssueDetails[this.Issue.IssueDetails.length - 1].Description.length) {
                    this.Issue.IssueDetails.push({Description:"", Hours:0.00 });
                }
            },
            getClientOptions(search, loading) {
                loading(true);
                this.options = this.persons.filter(function(item) {return item.Name.toLowerCase().indexOf(search.toLowerCase()) !== -1;});
                loading(false);
            },
            getClientIdCallback(val) {
                this.Issue.ClientId = val.Id;
                //console.dir(JSON.stringify(val));
            },
            getSuppOptions(search, loading) {
                loading(true);
                this.options = this.persons.filter(function(item) {return item.Name.toLowerCase().indexOf(search.toLowerCase()) !== -1;});
                loading(false);
            },
            getSuppIdCallback(val) {
                this.Issue.SuppId = val.Id;
                //console.dir(JSON.stringify(val));
            },
            onSave() {
                this.Issue.Client = this.persons.find((el) => el.Id === this.Issue.ClientId);
                this.Issue.ClientName = this.Issue.Client.Name;
                this.Issue.Name = this.Issue.IssueDetails[0].Description;

                this.Issue.IssueDetails.forEach((item)=> item.Hours = Number(item.Hours));

                var d = this.Issue.Date;
                d = d.slice(6, 10) + "-" + d.slice(3, 5) + "-" + d.slice(0, 2);

                var sendModel = {
                    Id:this.Issue.Id,
                    OpDate:d,
                    ClientId:this.Issue.ClientId,
                    SuppId:this.Issue.SuppId,
                    IssueDetails:this.Issue.IssueDetails.filter(function(item) {return item.Description.trim() !== "";})
                }

                var xhr = new XMLHttpRequest();
                xhr.open("POST", "/Issue/AddOrUpdate", true);
                xhr.setRequestHeader("Content-type", "application/json; charset=utf-8");
                xhr.onreadystatechange = () => {
                    if (xhr.readyState === 4 && xhr.status === 200) {
                        var flag = this.Issue.Id === 0;
                        this.Issue.Id = Number(xhr.responseText);

                        if (flag) this.Issues.unshift(this.Issue);
                        //window.history.pushState('/Issue/AddOrUpdate', '/Issue/AddOrUpdate', '/Issue/AddOrUpdate/'+this.Issue.Id);
                        //console.log(xhr.responseText);
                    }

                };
                var data = JSON.stringify(sendModel);
                xhr.send(data);
            }
        }
    });

    //import VModal from "vue-js-modal";
    //Vue.component('modal', VueSelect.VueSelect);

    //import VModal from 'vue-js-modal';
    //Vue.use(VModal);


    //Vue.component('vue-js-modal');

    var issueList = new Vue({
        el: '#issue-list',
        data: {
            issues: @Html.Raw(Json.Encode(Model)),
            filter: "",
            pageNo: 1,
            pageRows: 40,
            pages: 0,
            rows: 0,
            showModal: false,
            currentId: 0,
            persons:@Html.Raw(Json.Encode(@ViewBag.persons)),
            currentIssue: {}
        },
        computed: {
            filtered_items: function() {
                var ret = [];
                var ret0 = [];
                var self = this;
                ret0 = self.issues.filter(function(item) {
                    return item.ClientName.toLowerCase().indexOf(self.filter.toLowerCase()) !== -1;
                });
                ret = ret0.filter(function(item, index) {
                    return (index >= (0 + (self.pageNo - 1) * self.pageRows) && index < (self.pageNo) * self.pageRows);
                });

                this.pages = Math.ceil(ret0.length / this.pageRows);
                self.rows = ret0.length;
                return ret;
            },
            filter1: {
                get: function() {
                    return this.filter;
                },
                set: function(newValue) {
                    this.pageNo = 1;
                    this.filter = newValue;
                }
            }
        },
        methods: {
            nextPage: function(event) {
                if (this.pageNo < this.pages) this.pageNo++;
            },
            prevPage: function(event) {
                if (this.pageNo > 1) this.pageNo--;
            },
            deleteIssue: function(i) {
                var xhr = new XMLHttpRequest();
                xhr.open("GET", "/Issue/Delete/"+i, true);
                xhr.onreadystatechange = () => {
                    if (xhr.readyState === 4 && xhr.status === 200) {
                        var removeIndex = this.issues.map(function(item) { return item.Id; }).indexOf(Number(i));
                        ~removeIndex && this.issues.splice(removeIndex, 1);
                    }
                };
                xhr.send();
            },
            edit2: function(i) {

                if (i !== 0) {
                    this.currentId = i;
                    this.currentIssue = this.issues.find(el => el.Id === i);
                    fetch('http://localhost:64129/Issue/AddOrUpdate2/' + i)
                        .then(resp => resp.json())
                        .then(data => {
                            this.currentIssue.IssueDetails = data.IssueDetails;
                            this.currentIssue.IssueDetails.push({ Description: "", Hours: 0.00 });
                            this.currentIssue.Client = this.persons.find((el) => el.Id === data.ClientId);
                            this.currentIssue.Supporter = this.persons.find((el) => el.Id === data.SuppId);
                        });

                } else {
                    this.currentId = 0;
                    //var tmpIssue = this.items.find(x => true);

                    var tmpIssue = this.issues.reduce((prev, current) => (prev.OpDate > current.OpDate) ? prev : current)

                    var suppId = 0;
                    var supporter = null;
                    var clientId    = 0;
                    var client      = null;
                    var supporterName = "";
                    var clientName = "";

                    if (tmpIssue !== null && tmpIssue !== undefined) {
                        suppId    = tmpIssue.SuppId;
                        supporter = tmpIssue.Supporter;
                        supporterName = supporter!==null&&supporter!==undefined?supporter.Name:"";

                        clientId    = tmpIssue.СlientId;
                        client      = tmpIssue.Client;
                        clientName = client!==null&&client!==undefined?client.Name:"";
                     }

                    this.currentIssue = {
                        Id:0 
                        ,OpDate:new Date()
                        ,ClientId:clientId
                        ,SuppId:suppId
                        ,IssueDetails:[{Id:0, Description:""}]
                        ,Client:client
                        ,Supporter:supporter
                        ,ClentName:clientName
                        ,SupporterName:supporterName
                        ,Date:("0"+new Date().getDate()).slice(-2) +"/"+ ("0"+(new Date().getMonth() + 1)).slice(-2) + "/" + new Date().getFullYear()
                        ,Name:""
                    }
                }
                this.showModal = true;
            },
            show: function() {
                this.$modal.show('hello-world');
            },
            hide: function() {
                this.$modal.hide('hello-world');
            }
        }
    });
</script>

<!-- template for the modal component -->
<script type="text/x-template" id="modal-template">
    <transition name="modal">
        <div class="modal-mask">
            <div class="modal-wrapper">
                <div class="modal-container">

                    <div class="modal-header">
                        <slot name="header">
                            Issue
                        </slot>
                    </div>

                    <div class="modal-body">
                        <slot name="body">

                            <div class="form-group row">
                                <label class="control-label col-md-1" for="OpDate">OpDate</label>
                                <div class="col-md-9">
                                    <input id="Date" name="Date" v-model:value="Issue.Date" class="form-control" />
                                </div>
                            </div>

                            <div class="form-group row">
                                <label class="control-label col-md-1" for="Client">Client</label>
                                <div class="col-md-9">
                                    <v-select :debounce="1000"
                                              :on-search="getClientOptions"
                                              :on-change="getClientIdCallback"
                                              :options="optionsClient"
                                              :value=Issue.Client
                                              placeholder="Search client..."
                                              label="Name"
                                              >
                                    </v-select>
                                </div>
                            </div>
                            
                            <div class="form-group row">
                                <label class="control-label col-md-1" for="Client">Supporter</label>
                                <div class="col-md-9">
                                    <v-select :debounce="1000"
                                              :on-search="getSuppOptions"
                                              :on-change="getSuppIdCallback"
                                              :options="optionsSupp"
                                              :value=Issue.Supporter
                                              placeholder="Search supporter..."
                                              label="Name"
                                              >
                                    </v-select>
                                </div>
                            </div>

                            <tr v-for="descr in Issue.IssueDetails">
                                <td>
                                    <textarea cols="100" v-on:keyup="onChange" style="max-width: 748px; width: 748px; max-height: 80px; height: 80px; resize: none;" maxlength="255" v-model="descr.Description" class="form-control" name="IssueDetails[]" placeholder="Enter task"></textarea>
                                </td>
                                <td style="vertical-align: top;">
                                    <input type="number" v-model="descr.Hours" class="form-control" />
                                </td>
                            </tr>
                        </slot>
                    </div>

                    <div class="modal-footer">
                        <slot name="footer">
                            <button class="modal-default-button" v-on:click="$emit('close');">Close</button>
                            <button class="modal-default-button" v-on:click="onSave">Save </button>
                        </slot>
                    </div>
                </div>
            </div>
        </div>
    </transition>
</script>